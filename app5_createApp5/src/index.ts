import electron, { app, BrowserWindow, ipcMain } from 'electron';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

let mainWindow: any = null;
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 400,
    width: 500,
    resizable: false, // サイズ変更不可
    fullscreenable: false, // フルスクリーン不可
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.subWindowsList = [];

  // Open the DevTools.
  //mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// ==============================================
// メインプロセス <=> レンダラープロセス間通信
// ==============================================

// --------------------------
// ウィンドウオープン
// --------------------------
// 参考URL: https://zenn.dev/sprout2000/books/3691a679478de2/viewer/13590
ipcMain.handle('open-window', async (e: any) => {
  console.log("called: open-window");

  const Screen = electron.screen
  const size = Screen.getPrimaryDisplay().size
  //console.log(size);
  const displays = Screen.getAllDisplays();
  //console.log(displays);
  console.log(mainWindow.subWindowsList);
  mainWindow.subWindowsList.map((item: any) => {
    item.close();
  });
  mainWindow.subWindowsList = [];

  displays.map((item) => {
    const bounds = item.bounds;

    // 子ウィンドウを作成
    const subWindow = new BrowserWindow({
      titleBarStyle: "hidden",
      x: bounds.x,
      y: bounds.y,
      width: bounds.width,
      height: bounds.height,
      transparent: true,
      frame: false,       // フレームを非表示にする
      resizable: false,    // ウィンドウリサイズ禁止
      //opacity: 0.3,
      alwaysOnTop: true,
      //fullscreen: true
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });
    subWindow.setWindowButtonVisibility(false)
    subWindow.setIgnoreMouseEvents(true)

    // 子ウィンドウ用 HTML
    subWindow.loadFile('./src/sub.html');

    // サブウィンドウを変数へ格納
    mainWindow.subWindowsList.push(subWindow);
  })

})

// --------------------------
// 子ウィンドウから親ウィンドウへ起動判定用
// --------------------------
ipcMain.handle('init-sub-window', async () => {
  console.log("called: init-sub-window");

  // 親ウィンドウへ通知
  mainWindow.webContents.send('reply');
});

// --------------------------
// 親ウィンドウから子ウィンドウへメッセージ送信
// --------------------------
ipcMain.handle('setup-sub-window', async (e, params) => {
  console.log("called: setup-sub-window");
  console.log("params: ", params);

  // 子ウィンドウへ通知
  //mainWindow.subWindowsList.map((item: any) => {
  //  console.log(item);
  //  item.webContents.send('sub-window-reply', params);
  //})
  mainWindow.subWindowsList[params.index].webContents.send('sub-window-reply', params);
  //mainWindow.webContents.send('sub-window-reply', params);
});
